using System;
using System.Collections.Generic;
using System.Linq;

namespace Judge
{
    class Program
    {
        static void Main(string[] args)
        {
            var allContests = new Dictionary<string, Dictionary<string, int>>();
            var participants = new Dictionary<string, int>();

            string[] input = Console.ReadLine()
                .Split(" -> ");

            while (input[0] != "no more time")
            {
                string user = input[0];
                string contest = input[1];
                int points = int.Parse(input[2]);

                if (!participants.ContainsKey(user))
                {
                    participants.Add(user, 0);
                }
                if (!allContests.ContainsKey(contest))
                {
                    allContests.Add(contest, new Dictionary<string, int>());
                    allContests[contest].Add(user, points);
                    participants[user] += points;
                }
                else
                {
                    if (allContests[contest].ContainsKey(user))
                    {
                        if (allContests[contest][user] < points)
                        {
                            participants[user] += points - participants[user];
                            allContests[contest][user] = points;
                        }
                    }
                    else
                    {
                        allContests[contest].Add(user, points);
                        participants[user] += points;
                    }
                }
                input = Console.ReadLine()
                .Split(" -> ");
            }
            foreach (var contest in allContests)
            {
                Console.WriteLine($"{contest.Key}: {contest.Value.Count} participants");
                int n = 1;   
                foreach (var item in contest.Value.OrderByDescending(x=>x.Value).ThenBy(x=>x.Key))
                {
                    Console.WriteLine($"{n}. {item.Key} <::> {item.Value}");
                    n++;
                }
            }
            
             int i = 1;
            Console.WriteLine("Individual standings:");
            foreach (var item in participants.OrderByDescending(x => x.Value).ThenBy(x => x.Key))
            {
                Console.WriteLine($"{i}. {item.Key} -> {item.Value}");
                i++;
            }
        }
    }
}
